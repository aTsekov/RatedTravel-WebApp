// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RatedTravel.Data;

#nullable disable

namespace RatedTravel.Data.Migrations
{
    [DbContext(typeof(RatedTravelDbContext))]
    [Migration("20230805062830_SeedAdmin")]
    partial class SeedAdmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasDefaultValue("Test");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasDefaultValue("Testov");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("75339214-cfa7-4006-9696-10fbe87f3039"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0914fbf4-4cd3-4952-95d9-f724d0ccc986",
                            Email = "pesho@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Pesho",
                            LastName = "Peshov",
                            LockoutEnabled = true,
                            NormalizedEmail = "PESHO@ABV.BG",
                            NormalizedUserName = "PESHO@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEDnxpjlTaYJ1vX4v7J12oUBUTycBNDLVyZWjWG2p6MzqoratcAY+bidSg8Rxt+glWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "IO4GJSB3O2UU22LJ737SOGOVYZM3PM2Z",
                            TwoFactorEnabled = false,
                            UserName = "pesho@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("d6eb8c37-86bc-423a-ac69-b98d16b0a887"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7cf787d-bb27-4d2f-9c91-6b7fdb4c70ea",
                            Email = "antk@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Antoni",
                            LastName = "Tsekov",
                            LockoutEnabled = true,
                            NormalizedEmail = "ANTK@ABV.BG",
                            NormalizedUserName = "ANTK@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEJYaHDKeWygEQcg2rAHKDlGZiPXR8dhgrXUME+kIp6xYI4DKTpSznlovkmsGo3yYeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "WPQQQTDY45QTNVNFPBU7CTFVSD5A4T2V",
                            TwoFactorEnabled = false,
                            UserName = "antk@abv.bg"
                        },
                        new
                        {
                            Id = new Guid("1cfe52cb-afc4-4ffa-a1cc-236dc7ae148f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94bd2382-035e-4d18-9d69-ac4bff1cea38",
                            Email = "admin@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminov",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEIXAEj/zxVPqj6r1ZB00uJ1DMrDd4h9I/4XDTYN+DQP7mwhf5d+EDNcDArbM3pYT5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "S5MQMIEVUDPTHQXJMACG5CPC6ZCJI6H4",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        });
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorthVisitingScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Attractions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = new Guid("7e980128-41f1-4351-b11f-2e9ac6d0cade"),
                            Description = "Explore the rich history of our city at the Historical Museum.",
                            ImageUrl = "HistoricalMuseumLondon.jpg",
                            IsActive = true,
                            Name = "Historical Museum",
                            UserId = new Guid("75339214-cfa7-4006-9696-10fbe87f3039"),
                            WorthVisitingScore = 5
                        },
                        new
                        {
                            Id = 2,
                            CityId = new Guid("ca551b7b-d085-45e5-b26d-f62b7d6965ee"),
                            Description = "Immerse yourself in the beauty of nature at our Botanical Garden.",
                            ImageUrl = "BotanicalGardenParis.jpg",
                            IsActive = true,
                            Name = "Botanical Garden",
                            UserId = new Guid("75339214-cfa7-4006-9696-10fbe87f3039"),
                            WorthVisitingScore = 4
                        });
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Bar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OverallScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main Street",
                            CityId = new Guid("7e980128-41f1-4351-b11f-2e9ac6d0cade"),
                            Description = "A cozy pub with a wide selection of beers.",
                            ImageUrl = "ThePubLondon.jpg",
                            IsActive = true,
                            Name = "The Pub",
                            OverallScore = 4,
                            UserId = new Guid("75339214-cfa7-4006-9696-10fbe87f3039"),
                            Website = "https://www.londonpub.imperialhotels.co.uk"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm Street",
                            CityId = new Guid("ca551b7b-d085-45e5-b26d-f62b7d6965ee"),
                            Description = "A popular bar known for its friendly atmosphere.",
                            ImageUrl = "ParisBar.jpg",
                            IsActive = true,
                            Name = "Cheers Bar",
                            OverallScore = 4,
                            UserId = new Guid("75339214-cfa7-4006-9696-10fbe87f3039"),
                            Website = "https://lecalbarcocktail.com/"
                        });
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.BarReviewAndRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BarId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("LocationRate")
                        .HasColumnType("int");

                    b.Property<int>("MusicRate")
                        .HasColumnType("int");

                    b.Property<int>("PriceRate")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ServiceRate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BarId");

                    b.ToTable("BarReviewsAndRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BarId = 1,
                            IsActive = true,
                            LocationRate = 4,
                            MusicRate = 4,
                            PriceRate = 3,
                            ReviewText = "Great atmosphere and friendly staff!",
                            ServiceRate = 5
                        },
                        new
                        {
                            Id = 2,
                            BarId = 2,
                            IsActive = true,
                            LocationRate = 3,
                            MusicRate = 5,
                            PriceRate = 2,
                            ReviewText = "Lively place with good music, but drinks are a bit overpriced.",
                            ServiceRate = 4
                        });
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NightlifeScore")
                        .HasColumnType("int");

                    b.Property<int>("TransportScore")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e980128-41f1-4351-b11f-2e9ac6d0cade"),
                            Country = "United Kingdom",
                            Description = "London is the capital and largest city of England and the United Kingdom. It is a vibrant and diverse city known for its rich history, iconic landmarks, and cultural attractions. From the majestic Tower of London to the bustling streets of Covent Garden, there is something for everyone in this cosmopolitan metropolis.",
                            EmployeeId = new Guid("2d2ee1b2-d178-42b7-aebe-25f85f15902c"),
                            ImageUrl = "London.jpg",
                            IsActive = true,
                            Name = "London",
                            NightlifeScore = 4,
                            TransportScore = 5
                        },
                        new
                        {
                            Id = new Guid("ca551b7b-d085-45e5-b26d-f62b7d6965ee"),
                            Country = "France",
                            Description = "Paris, the capital of France, is a city renowned for its art, fashion, and cuisine. With its world-famous landmarks like the Eiffel Tower, Louvre Museum, and Notre-Dame Cathedral, Paris attracts millions of visitors each year. The city's charming streets, sidewalk cafes, and romantic atmosphere make it a favorite destination for couples and art enthusiasts.",
                            EmployeeId = new Guid("2d2ee1b2-d178-42b7-aebe-25f85f15902c"),
                            ImageUrl = "Paris.jpg",
                            IsActive = true,
                            Name = "Paris",
                            NightlifeScore = 4,
                            TransportScore = 4
                        });
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d2ee1b2-d178-42b7-aebe-25f85f15902c"),
                            FullName = "Antoni Tsekov",
                            PhoneNumber = "1234567890",
                            UserId = new Guid("d6eb8c37-86bc-423a-ac69-b98d16b0a887")
                        },
                        new
                        {
                            Id = new Guid("148fd70c-8a0a-4c13-af75-ffc5f204a0ac"),
                            FullName = "Admin Adminov",
                            PhoneNumber = "111222333",
                            UserId = new Guid("1cfe52cb-afc4-4ffa-a1cc-236dc7ae148f")
                        });
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OverallScore")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "789 Oak Street",
                            CityId = new Guid("7e980128-41f1-4351-b11f-2e9ac6d0cade"),
                            Description = "A charming bistro offering delicious cuisine.",
                            ImageUrl = "BistroLondon.jpg",
                            IsActive = true,
                            Name = "The Bistro",
                            OverallScore = 4,
                            UserId = new Guid("75339214-cfa7-4006-9696-10fbe87f3039")
                        },
                        new
                        {
                            Id = 2,
                            Address = "321 Pine Street",
                            CityId = new Guid("ca551b7b-d085-45e5-b26d-f62b7d6965ee"),
                            Description = "An Italian restaurant known for its authentic dishes.",
                            ImageUrl = "LaTrattoria.jpg",
                            IsActive = true,
                            Name = "La Trattoria",
                            OverallScore = 4,
                            UserId = new Guid("75339214-cfa7-4006-9696-10fbe87f3039")
                        });
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.RestaurantReviewAndRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FoodRate")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("LocationRate")
                        .HasColumnType("int");

                    b.Property<int>("PriceRate")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ServiceRate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantReviewsAndRates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FoodRate = 5,
                            IsActive = true,
                            LocationRate = 4,
                            PriceRate = 3,
                            RestaurantId = 1,
                            ReviewText = "Great food and excellent service!",
                            ServiceRate = 4
                        },
                        new
                        {
                            Id = 2,
                            FoodRate = 3,
                            IsActive = true,
                            LocationRate = 3,
                            PriceRate = 4,
                            RestaurantId = 2,
                            ReviewText = "Average food quality but the ambiance is nice.",
                            ServiceRate = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RatedTravel.Data.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Attraction", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.City", "City")
                        .WithMany("Attractions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RatedTravel.Data.DataModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RatedTravel.Data.DataModels.ApplicationUser", "User")
                        .WithMany("CreatedAttractions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Bar", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.City", "City")
                        .WithMany("Bars")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RatedTravel.Data.DataModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RatedTravel.Data.DataModels.ApplicationUser", "User")
                        .WithMany("CreatedBars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.BarReviewAndRate", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.Bar", "Bar")
                        .WithMany("Reviews")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bar");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.City", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.Employee", "Employee")
                        .WithMany("OwnedCities")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RatedTravel.Data.DataModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Employee", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Restaurant", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RatedTravel.Data.DataModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("RatedTravel.Data.DataModels.ApplicationUser", "User")
                        .WithMany("CreatedRestaurants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.RestaurantReviewAndRate", b =>
                {
                    b.HasOne("RatedTravel.Data.DataModels.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.ApplicationUser", b =>
                {
                    b.Navigation("CreatedAttractions");

                    b.Navigation("CreatedBars");

                    b.Navigation("CreatedRestaurants");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Bar", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.City", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Bars");

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Employee", b =>
                {
                    b.Navigation("OwnedCities");
                });

            modelBuilder.Entity("RatedTravel.Data.DataModels.Restaurant", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
